// <auto-generated />
using System;
using Dashboard.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dashboard.Infrastructure.Migrations
{
    [DbContext(typeof(DashboardContext))]
    [Migration("20220412083407_BaseMigration")]
    partial class BaseMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dashboard.Domain.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountManager")
                        .HasColumnType("text")
                        .HasColumnName("account_manager");

                    b.Property<byte[]>("ClientLogo")
                        .HasColumnType("bytea")
                        .HasColumnName("client_logo");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.ToTable("clients", "dashboard");
                });

            modelBuilder.Entity("Dashboard.Domain.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Contact")
                        .HasColumnType("text")
                        .HasColumnName("contact");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_projects_client_id");

                    b.ToTable("projects", "dashboard");
                });

            modelBuilder.Entity("Dashboard.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", "dashboard");
                });

            modelBuilder.Entity("Dashboard.Domain.Models.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Client_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_name");

                    b.Property<string>("Is_open")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("is_open");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("Project_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("project_name");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("skill");

                    b.Property<string>("Target_start_date")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("target_start_date");

                    b.Property<int>("Vacancy_count")
                        .HasColumnType("integer")
                        .HasColumnName("vacancy_count");

                    b.HasKey("Id")
                        .HasName("pk_vacancies");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_vacancies_project_id");

                    b.ToTable("vacancies", "dashboard");
                });

            modelBuilder.Entity("Dashboard.Domain.Models.Project", b =>
                {
                    b.HasOne("Dashboard.Domain.Models.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Dashboard.Domain.Models.User", b =>
                {
                    b.OwnsOne("Dashboard.Domain.Models.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line1");

                            b1.Property<string>("Line2")
                                .HasColumnType("text")
                                .HasColumnName("address_line2");

                            b1.Property<string>("Line3")
                                .HasColumnType("text")
                                .HasColumnName("address_line3");

                            b1.Property<string>("Postcode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_postcode");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("Dashboard.Domain.Models.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .HasColumnType("text")
                                .HasColumnName("name_first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_last_name");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("text")
                                .HasColumnName("name_middle_name");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Domain.Models.Vacancy", b =>
                {
                    b.HasOne("Dashboard.Domain.Models.Project", "Project")
                        .WithMany("Vacancies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancies_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Dashboard.Domain.Models.Client", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Dashboard.Domain.Models.Project", b =>
                {
                    b.Navigation("Vacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
